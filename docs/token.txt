Token-based authentication without JSON (commonly referred to as JWT or JSON Web Tokens) can still be secure, but it depends on how the tokens are implemented and managed. Here are some key considerations:

1. Token Type and Structure:
JWT (JSON Web Tokens): JWTs are widely used and are considered secure when properly implemented. They contain a payload, a signature, and sometimes an expiration time.

Other Token Types: Tokens can be simple random strings, UUIDs, or even opaque tokens. These can be secure if they are properly managed and validated.

2. Token Storage:
Client-Side Storage: Tokens should be stored securely on the client side. For example, using HTTP-only cookies can help protect against XSS (Cross-Site Scripting) attacks.

Server-Side Storage: If the token is stored on the server (e.g., in a session), ensure that it is securely stored and that session fixation attacks are mitigated.

3. Token Expiration:
Short-Lived Tokens: Tokens should have a short expiration time to minimize the risk of them being compromised.

Refresh Tokens: Use refresh tokens to obtain new access tokens without requiring the user to re-authenticate. Refresh tokens should be stored securely and have a longer expiration time.

4. Token Validation:
Signature Verification: If using JWTs, ensure that the token signature is verified to prevent tampering.

Token Revocation: Implement mechanisms to revoke tokens if they are compromised or if the user logs out.

5. Transport Security:
HTTPS: Always use HTTPS to encrypt the communication between the client and server. This prevents man-in-the-middle attacks where tokens could be intercepted.

6. Token Scope and Permissions:
Least Privilege: Ensure that tokens are granted the minimum permissions necessary for the user to perform their tasks.

Scope Validation: Validate the scope of the token to ensure it is only used for the intended purpose.

7. Token Hashing:
Hashing Tokens: If storing tokens on the server, consider hashing them to protect against data breaches.

8. Rate Limiting and Monitoring:
Rate Limiting: Implement rate limiting to prevent brute-force attacks on token endpoints.

Monitoring: Monitor token usage for suspicious activity and revoke tokens if necessary.

9. Token Encryption:
Encryption: If the token contains sensitive information, consider encrypting the payload to protect it from being read by unauthorized parties.

Conclusion:
Token-based authentication without JSON can be secure if the tokens are properly managed, validated, and protected. The key is to follow best practices for token security, regardless of the format or type of token being used. Always prioritize security by implementing strong encryption, proper validation, and secure storage mechanisms.